% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fn_colour_columns.R
\name{fn_colour_columns}
\alias{fn_colour_columns}
\title{Color Cells in a Flextable Based on Numeric Values}
\usage{
fn_colour_columns(data, colnames_colour, colours, single_col_colouring = FALSE)
}
\arguments{
\item{data}{A data frame or flextable containing numeric data to be colored}

\item{colnames_colour}{Character vector. Names of columns to apply gradient coloring to.}

\item{colours}{Character vector. Colors to use for the gradient. At least 2 colors must be specified.}

\item{single_col_colouring}{Logical. If TRUE, each column is colored based on its own min/max values.
If FALSE (default), coloring is based on values across all specified columns.}
}
\value{
A flextable object with gradient coloring applied to the specified columns.
}
\description{
Creates a flextable with cell background colors assigned on a gradient based on numeric values.
Colors can be applied across all specified columns (global scale) or individually for each column.
}
\details{
The function applies gradient coloring to numeric columns in a flextable. The gradient
is determined by the numeric values in the specified columns and the provided colors.

If `single_col_colouring = FALSE` (default), the function finds the minimum and maximum
values across all specified columns and creates a single gradient scale that is applied
to all columns. This ensures that the same value gets the same color regardless of which
column it appears in.

If `single_col_colouring = TRUE`, each column is treated independently. The function
finds the minimum and maximum values for each column and creates a separate gradient
scale for each column. This means that the same value might get different colors in
different columns.

The function automatically handles input validation, including checking that all specified
columns exist and contain numeric data.
}
\examples{
# Load required libraries
library(dplyr)
library(flextable)

# Create example data
df <- tibble(
  Category = c("A", "B", "C", "D", "E"),
  Value1 = c(10, 20, 30, 40, 50),
  Value2 = c(5, 15, 25, 35, 45),
  Value3 = c(50, 40, 30, 20, 10),
  Text = c("low", "low-mid", "mid", "mid-high", "high")
)

# Basic usage - color two columns on a global scale with two colors
ft1 <- fn_colour_columns(df,
                       colnames_colour = c("Value1", "Value2"),
                       colours = c("white", "red"))

# Color three columns individually with a multi-color gradient
ft2 <- fn_colour_columns(df,
                       colnames_colour = c("Value1", "Value2", "Value3"),
                       colours = c("blue", "white", "red"),
                       single_col_colouring = TRUE)

# Use with existing flextable and more complex gradient
ft3 <- flextable(df) \%>\%
  bold(j = "Category") \%>\%
  fn_colour_columns(colnames_colour = c("Value1", "Value2", "Value3"),
                  colours = c("purple", "blue", "cyan", "green", "yellow", "orange", "red"))

}
