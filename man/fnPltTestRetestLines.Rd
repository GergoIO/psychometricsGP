% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fnPltTestRetestLines.R
\name{fnPltTestRetestLines}
\alias{fnPltTestRetestLines}
\title{Add Grade Boundary Lines to Test Retest Plots}
\usage{
fnPltTestRetestLines(
  plot = NULL,
  stage = NULL,
  testInYear = NULL,
  gradeBounds = NULL,
  gradeBoundsPrev = NULL,
  nBounds = NULL,
  nBoundsPrev = NULL
)
}
\arguments{
\item{plot}{A plot - a scatterplot of the stage specific test retest data}

\item{stage}{Numeric (integer) - the current stage being plotted}

\item{testInYear}{Numeric (integer) - the test in the academic year of this assessment. 1 for the first assessment}

\item{gradeBounds}{A dataframe of the grade boundaries for the current assessment. Cols should be named "Stage 1" etc. Rows should be named "Unsatisfactory", "Borderline", "Satisfactory", "Excellent"}

\item{gradeBoundsPrev}{A dataframe of the grade boundaries for the previous assessment. Cols should be named "Stage 1" etc. Rows should be named "Unsatisfactory", "Borderline", "Satisfactory", "Excellent"}

\item{nBounds}{The number of grade boundaries to add for the current assessment (3 means plot the B, S and E boundaries, 1 means plot only the S boundary)}

\item{nBoundsPrev}{The number of grade boundaries to add for the previous assessment}
}
\value{
An updated plot is returned. The new plot should be saved under the old plot (see examples)
}
\description{
A function for adding grade boundary lines to existing scatter plots of test retest data. The function handles changing the stage for the previous test when the current test is the first test in the year. If used in a loop, the number of bounds (previous and current) must be correct for each possible stage to be considered. If there are stages with a different number of grade bounds, use ifelse statements to account for that when setting nBounds and nBoundsPrev
}
\examples{
plt[[glue('testRetestStage{i}')]] <- fnPltTestRetestLines(plot = plt[[glue('testRetestStage{i}')]], stage = i, testInYear = cnst$testInYear, gradeBounds = tab$gradeBoundaries, gradeBoundsPrev = tab$gradeBoundariesPrev, nBounds = 3, nBoundsPrev = 3)
Use ifelse when setting nBounds and nBoundsPrev to avoid having multiple loops in the main script dependent on the test in year


}
